# -*- coding: utf-8 -*-
"""indrawijaya_Submission

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zFrPBp1MECT34AKtMveSkLt-3MJbAi9d
"""

pip install -q tensorflow-datasets

import tensorflow as tf
from tensorflow.keras.optimizers import RMSprop
from tensorflow.keras.preprocessing.image import ImageDataGenerator

!wget --no-check-certificate \
https://dicodingacademy.blob.core.windows.net/picodiploma/ml_pemula_academy/rockpaperscissors.zip

import zipfile, os
local_zip = 'rockpaperscissors.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/tmp')
zip_ref.close()
base_dir = '/tmp/rockpaperscissors/rps-cv-images'

os.listdir(base_dir)

train_data = ImageDataGenerator(
          rescale = 1./255,
          shear_range = 0.2,
          rotation_range = 25, 
          fill_mode = "wrap",
          horizontal_flip = True,
          validation_split = 0.4
  )

training_generate = train_data.flow_from_directory(
                    base_dir,
                    target_size = (100, 150),
                    shuffle = True,
                    subset = "training"
)
validation_generate = train_data.flow_from_directory(
                      base_dir,
                      target_size = (100, 150),
                      shuffle = True,
                      subset = "validation"
)

tipe = tf.keras.models.Sequential([
                                    tf.keras.layers.Conv2D(16, (3,3), activation = 'relu', input_shape = (100, 150, 3)),
                                    tf.keras.layers.MaxPooling2D(2,2),
                                    tf.keras.layers.Conv2D(32, (3,3), activation = 'relu'),
                                    tf.keras.layers.MaxPooling2D(2,2),
                                    tf.keras.layers.Conv2D(64, (3,3), activation = 'relu'),
                                    tf.keras.layers.MaxPooling2D(2,2),
                                    tf.keras.layers.Flatten(),
                                    tf.keras.layers.Dense(512, activation = 'relu'),
                                    tf.keras.layers.Dense(3, activation = 'softmax')
                                ])

tipe.compile(
    loss = "categorical_crossentropy",
    optimizer = tf.optimizers.Adam(),
    metrics = ["accuracy"]
)

tipe.fit(
    training_generate,
    steps_per_epoch = 16,
    epochs = 15,
    validation_data = validation_generate,
    validation_steps = 4,
    verbose = 2
)

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
from google.colab import files
from keras.preprocessing import image
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
# %matplotlib inline

uploaded = files.upload()

for gambar in uploaded.keys():
  path = gambar
  img = image.load_img(path, target_size = (100, 150))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis = 0)

  images = np.vstack([x])
  clasification = tipe.predict(images, batch_size = 30)

  print(gambar)
  if clasification[0][0] == 1:
    print("KERTAS")
  elif clasification[0][1] == 1:
    print("BATU")
  elif clasification[0][2] == 1:
    print("GUNTING")
  else:
    print("GAMBAR TIDAK DIKETAHUI")